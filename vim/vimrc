" Note: This vimrc is using native VIM plugin manager

set nocompatible
filetype plugin on
filetype indent on
syntax on
set encoding=utf-8
set fileencoding=utf-8
set autoindent
set ttyfast

" change CWD/PWD as per file being edited.
set autochdir

" highlight search as we typr
set incsearch

" no of spaces for tab
set tabstop=4

" no of spaces to be used while editing text. i.e <backspace> <tab>
set softtabstop=4

" no of spaces for autoindent
set shiftwidth=4

" convert tabs to spaces
set expandtab

" Autocomplete uses dictionary if spell is set in the session. ie set spell
set complete+=kspell
set completeopt=menuone,longest

" highlight the searches and set the search highlight color more pleasing to eyes
set hlsearch

" Shows the mode of vim at the bottom of screen
set showmode

" set ruler. Position of cursor at the right bottom corner
set ruler

" allow backspace to work in insert mode properly.
" indent => make backspace to work over autoindent
" eol => backspace will remove \n as well at the end of line
" start => delete text that you've inserted since insert mode started, and you can't delete any text that was previously inserted.'
set backspace=indent,eol,start

" show line numbers
set number
" set relativenumber

" commnd-line completions in vim
set wildmenu
set wildmode=full,longest:full

" show commands being typed on the right bottom corner
set showcmd

" autoread changes done to file externally
set autoread

" autowrite files
set autowriteall

" controls buffer switching and opening
set switchbuf=useopen,usetab

" enable fzf
set rtp+=/usr/local/opt/fzf

" set path for swapfiles
set directory^=$HOME/.vim/swapfiles//

" treat .ejs files as erb templates
au BufNewFile,BufRead *.ejs set filetype=erb.html
let g:python_recommended_style = 0

" make sure winow size does not change when a split window is closed
set equalalways!

" Leader key
let mapleader="\<space>"

set path+=**

" use 256 colors in terminal. This is needed so that tmux does not interfere wih vim color scheme
if !has("gui_running")
  set t_Co=256
  if !has('nvim')
    set term=screen-256color
  endif
endif

" gruvBox Theme
" set termguicolors
" let g:gruvbox_invert_selection = 0
" let g:gruvbox_invert_tabline = 1
" let g:gruvbox_improved_strings = 1
" set bg=dark
" let g:gruvbox_contrast_dark = 'hard'

if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif
" colorscheme gruvbox8_hard

" afterflow colorschem settings
" let g:afterglow_inherit_background=1
" let g:afterglow_blackout=1
" colorscheme afterglow

" colorscheme jellybeans

" highlight the whole length of current line
set cursorline
if !has('nvim')
  set cursorlineopt=line
endif
hi CursorLine ctermfg=none cterm=bold

" style the vertical bar in window split
set fillchars+=vert:\│
set splitbelow
set splitright

" Open file explorer in tree style
" let g:netrw_liststyle = 3
let g:netrw_wiw = 18
let g:netrw_banner = 0
let g:netrw_altgv = 1
" negative number sets the absolte size. +ve number sets size in percentage
let g:netrw_winsize = -25

" Airline settings
set laststatus=2

" load all plugins first
packloadall
packadd cfilter

" Need to install powerline-fonts and make sure terminal is also set to use one of powerline fonts. Otherwise you won't see fancy status in statusline
let g:airline_powerline_fonts=1
function! WindowNumber(...)
    let builder = a:1
    let context = a:2
    call builder.add_section('airline_b', ' %{tabpagewinnr(tabpagenr())} ')
    return 0
endfunction

call airline#add_statusline_func('WindowNumber')
call airline#add_inactive_statusline_func('WindowNumber')
let g:airline_powerline_fonts = 1
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
" let g:airline_theme='molokai'
let g:airline_theme='papercolor'

highlight SignColumn ctermbg=235 cterm=none

" FZF settings
let g:fzf_files_options = '--prompt="[!]filter: ᯼ ⫸  " --pointer="⮀" --marker="✔" --preview "bat --style=numbers,changes --color always"'
" allows fzf to open files forecfully
set hidden

" vim-agriculture settings
let g:agriculture#disable_smart_quoting = 1

" Defining custom :CDdir command using fzf
function Cddir(dir)
  execute "tcd " . fnameescape(a:dir)
  execute "pwd"
endfunction
function ChangeDirFZF(query, fullscreen)
  let l:dirListCmd = 'fd -t d -H -I --exclude ".git" "" ' . a:query
  call fzf#run(fzf#wrap({
    \ 'source': l:dirListCmd,
    \ 'sink': function('Cddir'),
    \ 'options': ['--preview', 'tree -F -L 2 {}', '--preview-window', 'wrap']},
    \ a:fullscreen))
endfunction
command! -bang -complete=dir -nargs=* CDdir call ChangeDirFZF(<q-args>, <bang>0)

" comments in file in orangish colour
call Base16hi("Comment", g:base16_gui09, "", g:base16_cterm0F, "", "", "")

 
" ================ COC settings START ================
" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
" set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif


" ================ COC settings END ================


"================ nnn.vim settings  ================
let g:nnn#layout = { 'left': '~20%'  }
let g:nnn#action = {
      \ '<c-t>': 'tab split',
      \ '<c-s>': 'split',
      \ '<c-v>': 'vsplit' }

"=============== indentLine settings ===============
let g:indentLine_char_list = ['│', '|', '¦', '┆', '┊']

"================ Floatterm key mapping ================
nnoremap   <silent>   <leader>fn    :FloatermNew<CR>
tnoremap   <silent>   <leader>fn    <C-\><C-n>:FloatermNew<CR>

nnoremap   <silent>   <leader>ft    :FloatermToggle<CR>
tnoremap   <silent>   <leader>ft    <C-\><C-n>:FloatermToggle<CR>

nnoremap   <silent>   <leader>fl   :FloatermUpdate --height=0.9 --width=0.9<CR>
tnoremap   <silent>   <leader>fl   <C-\><C-n>:FloatermUpdate --height=0.9 --width=0.9<CR>

nnoremap   <silent>   <leader>fs   :FloatermUpdate --height=0.6 --width=0.6<CR>
tnoremap   <silent>   <leader>fs   <C-\><C-n>:FloatermUpdate --height=0.6 --width=0.6<CR>

nnoremap   <silent>   <leader>fkh   :FloatermUpdate --position=topleft<CR>
tnoremap   <silent>   <leader>fkh   <C-\><C-n>:FloatermUpdate --position=topleft<CR>

nnoremap   <silent>   <leader>fkl   :FloatermUpdate --position=topright<CR>
tnoremap   <silent>   <leader>fkl   <C-\><C-n>:FloatermUpdate --position=topright<CR>

nnoremap   <silent>   <leader>fjh   :FloatermUpdate --position=bottomleft<CR>
tnoremap   <silent>   <leader>fjh   <C-\><C-n>:FloatermUpdate --position=bottomleft<CR>

nnoremap   <silent>   <leader>fjl   :FloatermUpdate --position=bottomright<CR>
tnoremap   <silent>   <leader>fjl   <C-\><C-n>:FloatermUpdate --position=bottomright<CR>

nnoremap   <silent>   <leader>fm    :FloatermUpdate --position=center<CR>
tnoremap   <silent>   <leader>fm    <C-\><C-n>:FloatermUpdate --position=center<CR>

nnoremap   <silent>   <leader>fc    :FloatermUpdate --position=auto<CR>
tnoremap   <silent>   <leader>fc    <C-\><C-n>:FloatermUpdate --position=auto<CR>
