" Note: This vimrc is using native VIM plugin manager

set nocompatible
filetype plugin on
filetype indent on
syntax on
set encoding=utf-8
set fileencoding=utf-8
set autoindent
set ttyfast

" highlight search as we typr
set incsearch

" no of spaces for tab
set tabstop=2

" no of spaces to be used while editing text. i.e <backspace> <tab>
set softtabstop=2

" no of spaces for autoindent
set shiftwidth=2

" convert tabs to spaces
set expandtab

" Autocomplete uses dictionary if spell is set in the session. ie set spell
set complete+=kspell
set completeopt=menuone,longest

" highlight the searches and set the search highlight color more pleasing to eyes
set hlsearch

" Shows the mode of vim at the bottom of screen
set showmode

" set ruler. Position of cursor at the right bottom corner
set ruler

" allow backspace to work in insert mode properly.
" indent => make backspace to work over autoindent
" eol => backspace will remove \n as well at the end of line
" start => delete text that you've inserted since insert mode started, and you can't delete any text that was previously inserted.'
set backspace=indent,eol,start

" show line numbers
set number
" set relativenumber

" commnd-line completions in vim
set wildmenu
set wildmode=full,longest:full

" show commands being typed on the right bottom corner
set showcmd

" autoread changes done to file externally
set autoread

" autowrite files
set autowriteall

" controls buffer switching and opening
set switchbuf=useopen,usetab

" enable fzf
set rtp+=/usr/local/opt/fzf

" set path for swapfiles
set directory^=$HOME/.vim/swapfiles//

" treat .ejs files as erb templates
au BufNewFile,BufRead *.ejs set filetype=erb.html
let g:python_recommended_style = 0

" make sure winow size does not change when a split window is closed
set equalalways!

" Leader key
let mapleader="\<space>"

set path+=**

" use 256 colors in terminal. This is needed so that tmux does not interfere wih vim color scheme
if !has("gui_running")
  set t_Co=256
  if !has('nvim')
    set term=screen-256color
  endif
endif

" gruvBox Theme
" set termguicolors
" let g:gruvbox_invert_selection = 0
" let g:gruvbox_invert_tabline = 1
" let g:gruvbox_improved_strings = 1
" set bg=dark
" let g:gruvbox_contrast_dark = 'hard'
colorscheme gruvbox8_hard

" afterflow colorschem settings
" let g:afterglow_inherit_background=1
" let g:afterglow_blackout=1
" colorscheme afterglow

" colorscheme jellybeans

" highlight the whole length of current line
set cursorline
if !has('nvim')
  set cursorlineopt=line
endif
hi CursorLine ctermfg=none cterm=bold

" style the vertical bar in window split
set fillchars+=vert:\│
set splitbelow
set splitright

" Open file explorer in tree style
" let g:netrw_liststyle = 3
let g:netrw_wiw = 18
let g:netrw_banner = 0
let g:netrw_altgv = 1
" negative number sets the absolte size. +ve number sets size in percentage
let g:netrw_winsize = -25

" Airline settings
set laststatus=2

" load all plugins first
packloadall

" Need to install powerline-fonts and make sure terminal is also set to use one of powerline fonts. Otherwise you won't see fancy status in statusline
let g:airline_powerline_fonts=1
function! WindowNumber(...)
    let builder = a:1
    let context = a:2
    call builder.add_section('airline_b', ' %{tabpagewinnr(tabpagenr())} ')
    return 0
endfunction

call airline#add_statusline_func('WindowNumber')
call airline#add_inactive_statusline_func('WindowNumber')
let g:airline_powerline_fonts = 1
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
" let g:airline_theme='molokai'
let g:airline_theme='papercolor'

highlight SignColumn ctermbg=235 cterm=none

" FZF settings
let g:fzf_files_options = '--prompt="[!]filter: ᯼ ⫸  " --pointer="⮀" --marker="✔" --preview "bat --style=numbers,changes --color always"'
" allows fzf to open files forecfully
set hidden

" vim-agriculture settings
let g:agriculture#disable_smart_quoting = 1

" Defining custom :CDdir command using fzf
function Cddir(dir)
  execute "tcd " . fnameescape(a:dir)
  execute "pwd"
endfunction
function ChangeDirFZF(query, fullscreen)
  let l:dirListCmd = 'fd -t d -H -I --exclude ".git" "" ' . a:query
  call fzf#run(fzf#wrap({
    \ 'source': l:dirListCmd,
    \ 'sink': function('Cddir'),
    \ 'options': ['--preview', 'tree -F -L 2 {}', '--preview-window', 'wrap']},
    \ a:fullscreen))
endfunction
command! -bang -complete=dir -nargs=* CDdir call ChangeDirFZF(<q-args>, <bang>0)

" ================ COC settings START ================
" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

" ================ COC settings END ================


"================ nnn.vim settings  ================
let g:nnn#layout = { 'left': '~20%'  }
let g:nnn#action = {
      \ '<c-t>': 'tab split',
      \ '<c-v>': 'vsplit' }

"=============== indentLine settings ===============
let g:indentLine_char_list = ['│', '|', '¦', '┆', '┊']
