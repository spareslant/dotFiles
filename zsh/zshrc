# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="bira"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS=true

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
#plugins=(git aws direnv git-prompt jenv pyenv rbenv rust ssh-agent terraform tmux vagrant-prompt vi-mode virtualenv osx per-directory-history z zsh-autosuggestions zsh-syntax-highlighting gcloud)
plugins=(git aws direnv git-prompt jenv pyenv rbenv rust ssh-agent terraform tmux vagrant-prompt vi-mode virtualenv osx z zsh-autosuggestions zsh-syntax-highlighting gcloud zsh-completions history-substring-search fzf)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

bindkey -v

#=============== gruvbox plugin settings ===============#
export TERM=xterm-256color

#=============== zsh-completions plugin settings ===============#
autoload -U compinit && compinit

#=============== zsh-history-substring-search plugin settings ===============#
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down

#=============== NVM settings ===============#
export NVM_DIR="$HOME/.nvm"
[ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
[ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && . "/usr/local/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

#=============== fzf settings ===============#
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

#=============== fzf custom settings ===============#
export FZF_DEFAULT_COMMAND='fd --hidden --exclude .git'
export FZF_DEFAULT_OPTS="--prompt='ðŸ”Ž (TopLevel dirListing: !/): ' --pointer='âŒ– ' --marker='âœ”' --color='bg:bold'"

function dotFilesLoc() {
  local this_script="$HOME/.zshrc"
  local nonSymLinkabsoluteLoc=$(greadlink -f "$this_script")
  local DOT_FILES_LOC=$(echo $nonSymLinkabsoluteLoc | perl -wnl -e 'm!(.+)/.+/.+$! and print $1')
  echo "${DOT_FILES_LOC}"
}

function utilityScriptLoc() {
  DOT_FILES_LOC=$(dotFilesLoc)
  echo "${DOT_FILES_LOC}/scripts/fileOrDir.sh"
}
UTILITY_SCRIPT=$(utilityScriptLoc)
source $UTILITY_SCRIPT

# ==== Open file/dir. Based on type of file it either cd to directory of opens file in vim when <Enter> is pressed
function fzOpenFileOrDir() {
  fzf --header="ðŸ“‚ $(pwd)" --preview="source $UTILITY_SCRIPT; previewFileOrDir {}" --preview-window='wrap' | openFileOrDir
}

# ==== Preview file/dir. Selected files will also be copied in system clipboard
function fzPreviewFilesOrDirsAndCopy() {
  #fzf --header="ðŸ“‚ $(pwd)" --multi --preview="source $UTILITY_SCRIPT; previewFileOrDir {}" --preview-window='wrap' --bind 'ctrl-o:execute(vim -R -o {})' | tee >(pbcopy)
  fzf --header="ðŸ“‚ $(pwd)" --multi --preview="source $UTILITY_SCRIPT; previewFileOrDir {}" --preview-window='wrap' | tee >(pbcopy)
}

# ==== Directory listing and switching
function fzChangeDir() {
  fd -t d -H -I --exclude .git | fzf --header="ðŸ“‚ $(pwd)" --preview="source $UTILITY_SCRIPT; previewFileOrDir {}" --preview-window='wrap' | openFileOrDir
}

# ==== Open multiple files in vim in their own respective windows. (Note: use :only in vim to all others)
function fzOpenMultiFilesInVim() {
  local filesList=$(mktemp -t fzf)
  fd -H -I -t f --exclude .git | fzf --header="ðŸ“‚ $(pwd)" --multi --preview="source $UTILITY_SCRIPT; previewFileOrDir {}" --preview-window='wrap' > "$filesList"
  vim -o $(cat "$filesList")
  rm -f "$filesList"
}

# ==== Changes the directory from current directory ownwards and also previews its underneath tree structure.
#function fzcd() {
#  cd $(fd -t d -H -I --exclude .git | fzf --header="ðŸ“‚ $(pwd)" --preview='tree -C -L 2 {}' --preview-window='wrap') && echo $PWD
#}

# ==== Changes the directory from HOME directory ownwards and also previews its underneath tree structure.
function fzChangeDirFromHome() {
  cd $(fd -t d -H -I --exclude .git '' $HOME/ | fzf --header="ðŸ“‚ $(pwd)" --preview='tree -C -L 2 {}' --preview-window='wrap') && echo $PWD
}

# ==== Grep word from all files in current directory and passes onto fzf for selection. Selected files will also be copied in system clipboard
function fzPreviewGreppedFiles() {
  [[ -z "$1" ]] && echo "usage is ./fzPreviewGreppedFiles <string>" && return 1
  local item="$1"
  rg --no-messages $item -l | fzf --header="ðŸ“‚ $(pwd)" --multi --preview-window='wrap' --preview="source $UTILITY_SCRIPT; previewFileOrDir {} | rg $item --color=always -C 2 --context-separator='~~~~~~~~~ SKIPPED CONTENT ~~~~~~~~~' " | tee >(pbcopy)
}

# ==== Do operation interactively on grepped files in vim. Additionaly select grepped files via fzf
function fzOperateOnSelectedGreppedFiles() {
  [[ -z "$1" ]] && echo "usage is ./fzOperateOnSelectedGreppedFiles <string>" && return 2
  local item="$1"
  local quickFixFile=$(mktemp -t fzf)
  rg --no-messages "$item" --vimgrep $(fzPreviewGreppedFiles "$item") > "$quickFixFile"
  vim -q "$quickFixFile" -c ":copen"
  rm -f "$quickFixFile"
}

# ==== Do operation interactively on grepped files in vim
function fzOperateOnGreppedFiles() {
  [[ -z "$1" ]] && echo "usage is ./fzOperateOnAllGreppedFiles <string>" && return 3
  local item="$1"
  local quickFixFile=$(mktemp -t fzf)
  rg --no-messages "$item" --vimgrep > "$quickFixFile"
  vim -q "$quickFixFile" -c ":copen"
  rm -f "$quickFixFile"
}

# ==== Do operation interactively on selected files in vim. 
function fzOperateOnSelectedFiles() {
  local quickFixFile=$(mktemp -t fzf)
  fd -H -I -t f --exclude .git | fzf --header="ðŸ“‚ $(pwd)" --multi --preview="source $UTILITY_SCRIPT; previewFileOrDir {}" --preview-window='wrap' > "$quickFixFile"
  vim -c ':set errorformat+=%f | :cexpr system("cat '$quickFixFile'") | copen'
  rm -f "$quickFixFile"
}

# ==== Git fuzzy settings
function gitFuzzyBinLoc() {
  DOT_FILES_LOC=$(dotFilesLoc)
  echo "${DOT_FILES_LOC}/downloaded/extraShellUtilities/git-fuzzy/bin"
}
GIT_FUZZY_BIN_PATH=$(gitFuzzyBinLoc)
export PATH="$GIT_FUZZY_BIN_PATH:$PATH"
export GF_PREFERRED_PAGER="delta --diff-highlight --line-numbers"

